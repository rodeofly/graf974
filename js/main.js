// Generated by CoffeeScript 1.10.0
(function() {
  var NoutGraf, chess_graph, foo_graph, g, graph, h, snake_graph, svg, unique_id;

  unique_id = 0;

  graph = {};

  foo_graph = function() {
    var i, j, k, results;
    graph = {
      "nodes": [],
      "links": []
    };
    for (i = j = 0; j <= 10; i = ++j) {
      graph.nodes.push({
        "id": ++unique_id,
        "x": 12,
        "y": 10
      });
    }
    results = [];
    for (i = k = 3; k <= 5; i = ++k) {
      results.push(graph.links.push({
        "source": unique_id + i - 10,
        "target": unique_id + i - 9,
        "weight": i
      }));
    }
    return results;
  };

  chess_graph = function(n) {
    var c, i, j, k, l, m, o, p, ref, ref1, ref2, ref3, ref4, results;
    if (n == null) {
      n = 8;
    }
    graph = {
      "nodes": [],
      "links": []
    };
    for (l = j = ref = n; ref <= 1 ? j <= 1 : j >= 1; l = ref <= 1 ? ++j : --j) {
      for (c = k = ref1 = n; ref1 <= 1 ? k <= 1 : k >= 1; c = ref1 <= 1 ? ++k : --k) {
        graph.nodes.push({
          "x": 0,
          "y": 0,
          "l": l,
          "c": c
        });
      }
    }
    for (l = m = 0, ref2 = n - 2; 0 <= ref2 ? m <= ref2 : m >= ref2; l = 0 <= ref2 ? ++m : --m) {
      for (c = o = 0, ref3 = n - 2; 0 <= ref3 ? o <= ref3 : o >= ref3; c = 0 <= ref3 ? ++o : --o) {
        graph.links.push({
          "source": n * l + c,
          "target": n * l + (c + 1),
          "weight": 23
        });
        graph.links.push({
          "source": n * l + c,
          "target": n * (l + 1) + c,
          "weight": 23
        });
      }
    }
    results = [];
    for (i = p = 0, ref4 = n - 2; 0 <= ref4 ? p <= ref4 : p >= ref4; i = 0 <= ref4 ? ++p : --p) {
      graph.links.push({
        "source": n * (n - 1) + i,
        "target": n * (n - 1) + (i + 1),
        "weight": 23
      });
      results.push(graph.links.push({
        "source": n * i + n - 1,
        "target": n * (i + 1) + n - 1,
        "weight": 23
      }));
    }
    return results;
  };

  snake_graph = function(n) {
    var i, j, k, ref, ref1, results;
    if (n == null) {
      n = 8;
    }
    graph = {
      "nodes": [],
      "links": []
    };
    for (i = j = 1, ref = n; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      graph.nodes.push({
        "x": 0,
        "y": 0,
        "l": i
      });
    }
    results = [];
    for (i = k = 0, ref1 = n - 2; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
      results.push(graph.links.push({
        "source": i,
        "target": i + 1,
        "weight": 23
      }));
    }
    return results;
  };

  NoutGraf = (function() {
    function NoutGraf(JSgraph, width, height) {
      var container, dblclick, drag, dragstart, link, node, refresh;
      this.width = width != null ? width : 1024;
      this.height = height != null ? height : 1024;
      this.id = ++unique_id;
      refresh = function() {
        link.attr("x1", function(d) {
          return d.source.x;
        }).attr("y1", function(d) {
          return d.source.y;
        }).attr("x2", function(d) {
          return d.target.x;
        }).attr("y2", function(d) {
          return d.target.y;
        });
        return node.attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        });
      };
      this.force = d3.layout.force().size([this.width, this.height]).charge(-400).linkDistance(40).on("tick", function() {
        return refresh();
      });
      dblclick = function(d) {
        return d3.select(this).classed("fixed", d.fixed = false);
      };
      dragstart = function(d) {
        return d3.select(this).classed("fixed", d.fixed = true);
      };
      drag = this.force.drag().on("dragstart", function() {
        return dragstart;
      });
      container = svg.append("g").attr("class", "noutgraf");
      link = container.selectAll(".link");
      node = container.selectAll(".node");
      this.addNode = function(JSgraph) {
        this.force.nodes(JSgraph.nodes).links(JSgraph.links).start();
        link = link.data(JSgraph.links).enter().append("line").attr("class", "link");
        return node = node.data(JSgraph.nodes).enter().append("circle").text("#" + this.id).attr("class", "node").attr("r", 12).attr("l", function(d) {
          return d.l;
        }).attr("c", function(d) {
          return d.c;
        }).on("click", function() {
          return console.log("l:" + (d3.select(this).attr('l')) + " ; c:" + (d3.select(this).attr('c')));
        }).call(drag);
      };
    }

    return NoutGraf;

  })();

  svg = d3.select("#svg").attr("width", 1024).attr("height", 600);

  g = new NoutGraf();

  snake_graph(8);

  g.addNode(graph);

  h = new NoutGraf();

  chess_graph(8);

  h.addNode(graph);

}).call(this);
